name: Release

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  APP_NAME: "acikgozb-dev"
  AWS_REGION: "${{ secrets.AWS_REGION }}"
  CLOUDFLARE_API_TOKEN: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
  FRONTEND_ARTIFACT_PATH: "public"

jobs:
  create-frontend-artifact:
    runs-on: ubuntu-24.04

    outputs:
      artifact-id: "${{ steps.upload-frontend-artifact.outputs.artifact-id }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install `hugo`
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 0.139.3

      - name: Create the frontend artifact
        shell: bash
        run: |
          hugo build --destination "$FRONTEND_ARTIFACT_PATH" --minify

      - name: Upload the frontend artifact
        id: upload-frontend-artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: "${{ env.FRONTEND_ARTIFACT_PATH }}"

  deploy:
    runs-on: ubuntu-24.04
    needs: create-frontend-artifact

    defaults:
      run:
        working-directory: ./terraform
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "${{ env.AWS_REGION }}"
          role-to-assume: "${{ secrets.AWS_OIDC_ROLE_ARN }}"
          role-session-name: "${{ env.APP_NAME }}-aws-session-${{ github.run_id }}"

      - name: Set the environment
        run: |
          read -r -a tf_env < <(./scripts/exec environment); \
          for env in ${tf_env[@]}; \
          do \
            echo "${env%:*}=${env#*:}" >> "$GITHUB_ENV"; \
          done

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Initialize Terraform
        run: |
          ./scripts/exec init

      - name: Download frontend artifact for deployment
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: "${{ env.FRONTEND_ARTIFACT_PATH}}"

      - name: Create Terraform plan
        run: |
          ./scripts/exec plan
        #
        # - name: Apply Terraform plan
        #   run: |
        #     ./scripts/exec apply > /dev/null
      - name: Cleanup the frontend artifact
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: ${{ needs.create-frontend-artifact.outputs.artifact-id }}
            })

